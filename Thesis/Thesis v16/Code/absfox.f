      SUBROUTINE STOABS(IV1,IMA,IL,IBB,IRA,IV2,ISA,IAP,INP)
*     CALCULATES CONSTANTS FIRST WITHOUT INITIALIZING VECTORS
*
*     FOR EXPLANATION OF TERMS AND DERIVATIONS OF THEORETICAL
*     MODELS USED, PLEASE SEE JOSIAH KUNZ DISSERTATION 2016.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION MASS
      DOUBLE PRECISION BETHEBLOCHC(6)
      INTEGER SAV,NPART
*-----MEMORY MANAGEMENT -----------------------------------
      PARAMETER(LMEM=1000000000,LVAR=100000000,LDIM=10000)
      INTEGER NTYP(LVAR),NBEG(LVAR),NEND(LVAR),NMAX(LVAR),
     *        NC(LMEM),NDIM(LDIM)
      DOUBLE PRECISION CC(LMEM)
      COMMON        NTYP,NBEG,NEND,NMAX, CC,NC, NDIM,IDIM, IVAR,IMEM
      COMMON /TYID/ NRE,NST,NLO,NCM,NVE,NIN,NIV,NDA,NCD,NTM,NGR
*
      IF(NTYP(IMA).NE.NRE) CALL FOXNTY(IMA)
      IF(NTYP(IAP).NE.NRE) CALL FOXNTY(IAP)
      IF(NTYP(IRA).NE.NRE) CALL FOXNTY(IRA)
      IF(NTYP(INP).NE.NRE) CALL FOXNTY(INP)
*
      MASS = CC(NBEG(IMA))
      RADLEN = CC(NBEG(IRA))
      SAV = NINT(CC(NBEG(ISA)))
      APE = CC(NBEG(IAP))
      NPART = CC(NBEG(INP))
      DO 5 I=0,6
       BETHEBLOCHC(I) = CC(NBEG(IBB+I))
5     CONTINUE
      CALL STORUN(IV1,MASS,IL,BETHEBLOCHC,RADLEN,IV2,SAV,APE,NPART)
      RETURN
      END
c  *********************************************************
      SUBROUTINE STORUN(IV1,MASS,IL,BETHEBLOCHC,RADLEN,IV2,SAV,APE,
     &                  NPART)
*     TAKES PARTICLE VECTOR V1 = (X,PX,Y,PY,TOF,EI)
*     THROUGH ABSORBER OF LENGTH L. THE ABSORBER HAS PROPERTIES 
*     DESCRIBED BY THE BETHEBLOCH ARRAY AND A RADIATION LENGTH
*     OF RADLEN. OUTPUT IS THE VECTOR V2.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION IP,L0,LAMBAR,LAMMAX,LATDIS,LO,MASS,MASSE,
     &                 MAXSTEP,MPL,NA,L
      DOUBLE PRECISION BETHEBLOCHC(6),MP(6),TH0A(6),DA(6), BAR(6)
!      REAL, DIMENSION(:), ALLOCATABLE :: LV ! LV(NPART)
!      REAL, DIMENSION(:,:), ALLOCATABLE :: V1 ! V1(NPART,6)
      DOUBLE PRECISION, DIMENSION(:), ALLOCATABLE :: LV ! LV(NPART)
      DOUBLE PRECISION, DIMENSION(:,:), ALLOCATABLE :: V1 ! V1(NPART,6)

      INTEGER FLAG,I,J,LDK,LCNT,LIT,NPART,SAV
*-----MEMORY MANAGEMENT -----------------------------------
      PARAMETER(LMEM=1000000000,LVAR=100000000,LDIM=10000)
      INTEGER NTYP(LVAR),NBEG(LVAR),NEND(LVAR),NMAX(LVAR),
     *        NC(LMEM),NDIM(LDIM)
      DOUBLE PRECISION CC(LMEM)
      COMMON        NTYP,NBEG,NEND,NMAX, CC,NC, NDIM,IDIM, IVAR,IMEM
      COMMON /TYID/ NRE,NST,NLO,NCM,NVE,NIN,NIV,NDA,NCD,NTM,NGR
*
!      ALLOCATE(LV(NPART),V1(NPART,6))!LENGTH VECTOR

      INTEGER IAllocateStatus,IAllocateStatus2
      ALLOCATE(LV(NPART+10),Stat=IAllocateStatus)
      ALLOCATE(V1(NPART+10,7),Stat=IAllocateStatus2)

      IF (IAllocateStatus /= 0) STOP "*** Not enough memory ***"
      IF (IAllocateStatus2 /= 0) STOP "*** Not enough memory ***"


      MP(1) = BETHEBLOCHC(1)         !Z NUMBER
      MP(2) = BETHEBLOCHC(2)         !ATOMIC MASS IN g/mol
      MP(3) = BETHEBLOCHC(3)*1E6     !DENSITY IN g/m^3
      MP(4) = BETHEBLOCHC(4)         !IONIZATION POTENTIAL IN MeV
      MP(5) = BETHEBLOCHC(5)         !DENSITY CORRECTION PARAMETER
      MP(6) = BETHEBLOCHC(6)         !SHELL   CORRECTION PARAMETER
*
*     GET INDIVIDUAL PATH LENGTHS AND (X, PX, ...)
*     ********************************************
      DO 7 I=1,NPART
      LV(I) = CC(NBEG(IL)+I-1)
       DO 6 J=1,6
        V1(I,J) = CC(NBEG(IV1+J)+I-1)
6      CONTINUE
7     CONTINUE
*
      DO 18 I=1,NPART !START PARTICLE LOOP
      XO   = V1(I,1)
      PXO  = V1(I,2)
      YO   = V1(I,3)
      PYO  = V1(I,4)
      TOFO = V1(I,5)
      EIO  = V1(I,6)
      LO   = LV(I)
      PO   = SQRT(EIO**2-MASS**2)
      PZO  = SQRT(PO**2-PXO**2-PYO**2)
      THO  = SIGN(ACOS(PZO/PO),XO+YO) !ORIGINAL ANGLE TO ROTATE BETWEEN FRAMES
      CTHO = PZ/P
      STHO = SQRT(1-CTHO**2)
C     
*     NOTE THAT ORIGINAL COMPONENTS ARE DENOTED WITH AN 'O' (E.G. XO, AS IN 
*     'ORIGINAL', NOT ZERO, 0). COMPONENTS ON THIS PARTICULAR STEP OF THE 
*     SIMULATION WILL HAVE NO SUBSCRIPT (E.G. X).
      X   = XO
      PX  = PXO
      Y   = YO
      PY  = PYO
      TOF = TOFO
      EI  = EIO
      L   = LO
      P   = PO
      PZ  = PZO
C
*     DEFINE PHYSICAL CONSTANTS
*     *************************
      C = 299792458.D0             !SPEED OF LIGHT IN m/s
      EULER = 0.5772156649015329d0
      BETA = SQRT(1-(MASS/EI)**2)
      GAM = 1/SQRT(1-BETA**2)
      MASSE = 0.510998928d0        !MASS OF ELECTRON IN MeV/c**2
      NA = 6.02214129d23           !AVAGADRO
      PLANCK = 1.239842d-12        !hc IN MeV*m
      RELECTRON = 2.8179403267d-15 !CLASSICAL ELECTRON RADIUS IN m
      A0 = 0.52917721092d-10       !BOHR IN m
      PI = 3.141592653589793d0
*
      DZ = 0.D0                    !PATHLENGTH CORRECTION PLACEHOLDER
C
*     CHECK FLAGS
*     ***********
10    CONTINUE
      FLAG = 0 
      IF (EI.LE.MASS .OR. EIO.NE.EIO .OR. LO.NE.LO) THEN 
       FLAG = 1   !'PARTICLE STOPPED' FLAG
       GOTO 16    !TERMINATE
      ELSEIF (SQRT(X**2+Y**2).GE.APE) THEN
       FLAG = 2   !'PARTICLE HIT APERTURE' FLAG
       GOTO 16
      ELSEIF (L.LE.0) THEN 
       FLAG = 3   !PARTICLE MISSED ABSORBER COMPLETELY
       GOTO 16
      ELSEIF ((MP(1).EQ.0).OR.(MP(2).EQ.0).OR.(MP(3).EQ.0).OR.(MP(4).EQ.
     &         0)) THEN
       FLAG = 5   !'DRIFT' FLAG (DEALS WITH Z=0)
       GOTO 16
      ENDIF
C
!      L = 2*L/(1+CTH) !TRUE PATHLENGTH CORRECTION PLACEHOLDER
C
C
*     STRAGGLING
*     **********
15    CONTINUE
      DE  = STRAG(MASS,EI,L,MP)
      IF ((DE.GE.EI-MASS).OR.(EI.EQ.MASS)) THEN
       FLAG = 1                    !PARTICLE STOPPED
       GOTO 16
      ENDIF
      EI  = EI-DE                 !NEW TOTAL ENERGY
      P   = SQRT(EI**2-MASS**2)   !NEW TOTAL MOMENTUM
      PZ  = P*PZO/PO              !ANGLE DID NOT CHANGE
      PX  = P*PXO/PO
      PY  = P*PYO/PO
C
*     SCATTER
*     *******
      IF (RADLEN.LE.0) RADLEN = 100*716.4/     !CRUDE APPROXIMATION IF USER
     &   (RHO*1E-6*Z*(Z+1)*LOG(287/SQRT(Z)))   !DOES NOT KNOW RAD LEN
*
      XD  = L*PXO/PZO                          !X DETERMINISTIC
      YD  = L*PYO/PZO
*
      HC1 = 0.103d0                            !FIRST ORDER HIGHLAND CORRECTION - EMPERICAL
      HC2 = 0.0038d0                           !SECOND ORDER HIGHLAND CORRECTION
      TH0   = 13.6/(BETA*P)*SQRT(L/RADLEN*     !CRITICAL ANGLE (LIKE GAUSSIAN SIGMA)
     &        (1+HC1*LOG(L/RADLEN)+HC2*
     &        (LOG(L/RADLEN))**2))
*
      PZR = SCATDIST(TH0,P)                    !PZ ROTATED, NOT IN LAB FRAME YET
      PT  = SQRT(P**2-PZ**2)                   !TRANSVERSE P AFTER STRAGGLING
      IF (PT.NE.PT) PT = 0                     !IN CASE PRECISION ERROR, PT = NaN
      PTR = SQRT(P**2-PZR**2)                  !PT ROTATED FRAME
      PZL = PZR*COS(THO)-PTR*SIN(THO)          !PZ IN LAB FRAME
      PTL = SQRT(P**2-PZL**2)                  !PT IN LAB FRAME
C
      CALL RANDOM_NUMBER(R1)
      R1  = R1*2*PI
      PX  = PX+(PTL-PT)*SIGN(COS(R1),R1-PI)
      PY  = PY+(PTL-PT)*SIN(R1)

*     TRANSVERSE DISPLACEMENT
*     ***********************
      THETAC = 13.6/(BETA*P)*SQRT(1/RADLEN)
      ANGDIF = ASIN(PX/P)-ASIN(PXO/PO)         !AMOUNT OF DEFLECTION IN X
      X    = X+XD+LATDIS(ANGDIF,L,THETAC)      !SHIFT+DETERMINISTIC+FLUCTUATION
      ANGDIF = ASIN(PY/P)-ASIN(PYO/PO)
      Y    = Y+YD+LATDIS(ANGDIF,L,THETAC)
      TOF  = TOF+DTOF(EIO,P,MASS,L+DZ)
C     CHECK FLAGS AGAIN
      IF (FLAG.EQ.0) THEN
       IF (EI.LE.MASS) THEN
        FLAG = 1                               !'PARTICLE STOPPED' FLAG 
       ELSEIF (SQRT(X**2+Y**2).GE.APE) THEN
        FLAG = 2                               !'PARTICLE HIT APERTURE' FLAG
       ENDIF
      ENDIF
16    CONTINUE
      IF ((FLAG.EQ.3).OR.(FLAG.EQ.5)) THEN     !'PARTICLE MISSED ABSORBER' OR 'DRIFT' FLAG
       EI = EIO
       X = XO+LO*PXO/PO
       Y = YO+LO*PYO/PO
       TOF = TOFO+LO/(C*SQRT(EI**2-MASS**2)/EI)
      ELSEIF ((FLAG.EQ.1).OR.(FLAG.EQ.2).OR.(FLAG.EQ.4)) THEN !STOPPED, APERTURE, OR DECAY
       X   = 0.D0
       PX  = 0.D0
       Y   = 0.D0
       PY  = 0.D0
       TOF = 0.D0
       EI  = 0.D0
      ENDIF
      CC(NBEG(IV1+1)+I-1) = X
      CC(NBEG(IV1+2)+I-1) = PX
      CC(NBEG(IV1+3)+I-1) = Y
      CC(NBEG(IV1+4)+I-1) = PY
      CC(NBEG(IV1+5)+I-1) = TOF
      CC(NBEG(IV1+6)+I-1) = EI
      IF (SAV.GT.0) THEN
        WRITE(SAV,20) X,PX,Y,PY,TOF,EI,FLAG
      ENDIF
20    FORMAT(6E22.14,I5)
21    FORMAT(1A3)
18    CONTINUE
      RETURN
      END
c  *********************************************************
      FUNCTION STRAG(MASS,EI0,L0,MP)
*     DETERMINES ENERGY LOSS OF A PARTICLE TRAVELLING THROUGH
*     ABSORBER WITH ALPHALAN AS THE APPROXIMATE MEAN ENERGY LOSS,
*     XI AS A SCALING PARAMETER, DEMAX AS THE MAXIMUM ENERGY LOSS
*     (FOR THE LANDAU DISTRIBUTION), EMAX AS THE MAXIMUM ENERGY 
*     LOSS PER INTERACTION, AND BETA*C AS THE INCIDENT SPEED OF 
*     THE PARTICLE.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION MP(6)
      DOUBLE PRECISION PAR(6)
      DOUBLE PRECISION IP,L,LAMBAR,LAMBARI,LAMMAX,LAMMAXI,LANDAU,LANDAU2
     &                 ,L0,LLI,MASS,MASSE,NA
      INTEGER J,K
*
C
*     DEFINE PHYSICAL CONSTANTS
*     *************************
      EULER = 0.5772156649015329d0
      BETA = SQRT(1-(MASS/EI)**2)
      GAM = 1/SQRT(1-BETA**2)
      MASSE = 0.510998928d0        !MASS OF ELECTRON IN MeV/c**2
      NA = 6.02214129d23           !AVAGADRO
      PLANCK = 1.239842d-12        !hc IN MeV*m
      RELECTRON = 2.8179403267d-15 !CLASSICAL ELECTRON RADIUS IN m
      A0 = 0.52917721092d-10       !BOHR IN m
      PI = 3.141592653589793d0      
C     LANDAU LAMBDA CUTOFF PARAMETERS
      PAR = (/ 0.517891D0, 1.17765D0, 0.476074D0, 0.00880733D0, 
     &         1.15467D0 , 0.984008D0 /)
*
*     DEFINE SPECIFIC MATERIAL CONSTANTS FOR ENERGY LOSS
*     **************************************************
      Z   = MP(1)
      A   = MP(2)
      RHO = MP(3)
      IP  = MP(4)
      DCP = MP(5)
      SCP = MP(6)
*
C     CALL FLAGS FOR CALCULATING DENSITY, SHELL PARAMETERS
*     ****************************************************
      DF = 0.D0
      SF = 0.D0
      IF (DCP.EQ.0) DF = 1 !USER DID NOT SUPPLY CORRECTION PARAMETER
      IF (SCP.EQ.0) SF = 1 !SO WE WILL APPROXIMATE
*      
C     CAN ONLY CALCULATE ONE STEP AT A TIME, SINCE E IS DYNAMIC
C     (CANNOT SIMPLY SPLIT ABSORBER INTO EVEN PIECES).
C     THAT IS, IF E IS TOO HIGH THE STEP MAY NOT BE A 'LANDAU' STEP
C     ANYMORE, INVALIDATING THE THEORY.
*
      CUL = 0.D0  !CUMULATIVE LENGTH
      DE  = 0.D0  !ENERGY LOSS
*
      DO 25 WHILE (CUL.LT.L0)  !LOOP THROUGH LANDAU-EXCLUSIVE STEPS
       EF = EI0-DE
       GAM = EF/MASS
       BETA = SQRT(1-1/GAM**2)
C       DISABLE CRUDE APPROXIMATION FOR NOW
C       IF (DF.NE.0) DCP = GET_DCP(BETA*GAM,MP)
C       IF (SF.NE.0) SCP = GET_SCP(BETA*GAM,MP)
       EMAX = 2*MASSE*(BETA*GAM)**2/(1+2*GAM*MASSE/MASS+(MASSE/MASS)**2)
       J = 0
C      FIND L WHICH WILL PRODUCE A LANDAU ENERGY PROFILE
*      *************************************************
       DO 5 WHILE ((XI/EMAX>0.01D0).OR.(J<1))
        J = J+1
        L = L0/J
        XI = 2*PI*RELECTRON**2*MASSE*NA*Z*RHO*L/(A*BETA**2)
        IF (J>10000) THEN !PARTICLE IS GOING TOO SLOW, FAIL IT
         STRAG = EI0+1
         RETURN
        ENDIF 
5      CONTINUE      
*
       CUL = CUL+L
*
       IF (CUL.GT.L0) THEN     !ONLY USED ON THE FINAL STEP       
        L = L0-(CUL-L)
        XI = 2*PI*RELECTRON**2*MASSE*NA*Z*RHO*L/(A*BETA**2)
       ENDIF
       IF (L.LE.0) GOTO 25     !PRECISION ERROR
*
C      NOW PROPAGATE PARTICLE THROUGH L
*      ********************************
       EBAR = XI*(LOG(2*MASSE*(BETA*GAM/IP)**2*EMAX)-2*BETA**2-DCP-SCP)
       ALPHALAN = EBAR+XI*(BETA**2+LOG(XI/EMAX)+1-EULER)
       LAMBAR = -(1-EULER)-BETA**2-LOG(XI/EMAX)
       LAMMAX = PAR(1)+PAR(2)*LAMBAR+(PAR(3)+PAR(4)*LAMBAR)*EXP(PAR(5)
     &          +PAR(6)*LAMBAR)
       DEMAX = XI*(LAMMAX+1-EULER+BETA**2+LOG(XI/EMAX))+EBAR       
       DE = DE+LANDAU(ALPHALAN,XI,DEMAX)
25    CONTINUE
      STRAG = DE
      RETURN
      END
c  *********************************************************
      REAL FUNCTION LANDAU(MEAN,SIGMA,DEMAX)
C     Generate a random number following a Landau distribution
C     with Landau parameters alphalan = mean, betalan= xi = sigma.
C
C     This is a copy from the source file TRandom from SLAC.
C     Originally converted by Rene Brun from CERNLIB routine 
C     ranlan(G110).
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION MEAN
      INTEGER I,J,seed
      DOUBLE PRECISION F(982)
      F = (/
     &  0.       , 0       , 0       ,0        ,0        ,-2.244733,
     & -2.204365,-2.168163,-2.135219,-2.104898,-2.076740,-2.050397,
     & -2.025605,-2.002150,-1.979866,-1.958612,-1.938275,-1.918760,
     & -1.899984,-1.881879,-1.864385,-1.847451,-1.831030,-1.815083,
     & -1.799574,-1.784473,-1.769751,-1.755383,-1.741346,-1.727620,
     & -1.714187,-1.701029,-1.688130,-1.675477,-1.663057,-1.650858,
     & -1.638868,-1.627078,-1.615477,-1.604058,-1.592811,-1.581729,
     & -1.570806,-1.560034,-1.549407,-1.538919,-1.528565,-1.518339,
     & -1.508237,-1.498254,-1.488386,-1.478628,-1.468976,-1.459428,
     & -1.449979,-1.440626,-1.431365,-1.422195,-1.413111,-1.404112,
     & -1.395194,-1.386356,-1.377594,-1.368906,-1.360291,-1.351746,
     & -1.343269,-1.334859,-1.326512,-1.318229,-1.310006,-1.301843,
     & -1.293737,-1.285688,-1.277693,-1.269752,-1.261863,-1.254024,
     & -1.246235,-1.238494,-1.230800,-1.223153,-1.215550,-1.207990,
     & -1.200474,-1.192999,-1.185566,-1.178172,-1.170817,-1.163500,
     & -1.156220,-1.148977,-1.141770,-1.134598,-1.127459,-1.120354,
     & -1.113282,-1.106242,-1.099233,-1.092255,
     & -1.085306,-1.078388,-1.071498,-1.064636,-1.057802,-1.050996,
     & -1.044215,-1.037461,-1.030733,-1.024029,-1.017350,-1.010695,
     & -1.004064, -.997456, -.990871, -.984308, -.977767, -.971247,
     &  -.964749, -.958271, -.951813, -.945375, -.938957, -.932558,
     &  -.926178, -.919816, -.913472, -.907146, -.900838, -.894547,
     &  -.888272, -.882014, -.875773, -.869547, -.863337, -.857142,
     &  -.850963, -.844798, -.838648, -.832512, -.826390, -.820282,
     &  -.814187, -.808106, -.802038, -.795982, -.789940, -.783909,
     &  -.777891, -.771884, -.765889, -.759906, -.753934, -.747973,
     &  -.742023, -.736084, -.730155, -.724237, -.718328, -.712429,
     &  -.706541, -.700661, -.694791, -.688931, -.683079, -.677236,
     &  -.671402, -.665576, -.659759, -.653950, -.648149, -.642356,
     &  -.636570, -.630793, -.625022, -.619259, -.613503, -.607754,
     &  -.602012, -.596276, -.590548, -.584825, -.579109, -.573399,
     &  -.567695, -.561997, -.556305, -.550618, -.544937, -.539262,
     &  -.533592, -.527926, -.522266, -.516611, -.510961, -.505315,
     &  -.499674, -.494037, -.488405, -.482777,
     &  -.477153, -.471533, -.465917, -.460305, -.454697, -.449092,
     &  -.443491, -.437893, -.432299, -.426707, -.421119, -.415534,
     &  -.409951, -.404372, -.398795, -.393221, -.387649, -.382080,
     &  -.376513, -.370949, -.365387, -.359826, -.354268, -.348712,
     &  -.343157, -.337604, -.332053, -.326503, -.320955, -.315408,
     &  -.309863, -.304318, -.298775, -.293233, -.287692, -.282152,
     &  -.276613, -.271074, -.265536, -.259999, -.254462, -.248926,
     &  -.243389, -.237854, -.232318, -.226783, -.221247, -.215712,
     &  -.210176, -.204641, -.199105, -.193568, -.188032, -.182495,
     &  -.176957, -.171419, -.165880, -.160341, -.154800, -.149259,
     &  -.143717, -.138173, -.132629, -.127083, -.121537, -.115989,
     &  -.110439, -.104889, -.099336, -.093782, -.088227, -.082670,
     &  -.077111, -.071550, -.065987, -.060423, -.054856, -.049288,
     &  -.043717, -.038144, -.032569, -.026991, -.021411, -.015828,
     &  -.010243, -.004656,  .000934,  .006527,  .012123,  .017722,
     &   .023323,  .028928,  .034535,  .040146,  .045759,  .051376,
     &   .056997,  .062620,  .068247,  .073877,
     &   .079511,  .085149,  .090790,  .096435,  .102083,  .107736,
     &   .113392,  .119052,  .124716,  .130385,  .136057,  .141734,
     &   .147414,  .153100,  .158789,  .164483,  .170181,  .175884,
     &   .181592,  .187304,  .193021,  .198743,  .204469,  .210201,
     &   .215937,  .221678,  .227425,  .233177,  .238933,  .244696,
     &   .250463,  .256236,  .262014,  .267798,  .273587,  .279382,
     &   .285183,  .290989,  .296801,  .302619,  .308443,  .314273,
     &   .320109,  .325951,  .331799,  .337654,  .343515,  .349382,
     &   .355255,  .361135,  .367022,  .372915,  .378815,  .384721,
     &   .390634,  .396554,  .402481,  .408415,  .414356,  .420304,
     &   .426260,  .432222,  .438192,  .444169,  .450153,  .456145,
     &   .462144,  .468151,  .474166,  .480188,  .486218,  .492256,
     &   .498302,  .504356,  .510418,  .516488,  .522566,  .528653,
     &   .534747,  .540850,  .546962,  .553082,  .559210,  .565347,
     &   .571493,  .577648,  .583811,  .589983,  .596164,  .602355,
     &   .608554,  .614762,  .620980,  .627207,  .633444,  .639689,
     &   .645945,  .652210,  .658484,  .664768,
     &   .671062,  .677366,  .683680,  .690004,  .696338,  .702682,
     &   .709036,  .715400,  .721775,  .728160,  .734556,  .740963,
     &   .747379,  .753807,  .760246,  .766695,  .773155,  .779627,
     &   .786109,  .792603,  .799107,  .805624,  .812151,  .818690,
     &   .825241,  .831803,  .838377,  .844962,  .851560,  .858170,
     &   .864791,  .871425,  .878071,  .884729,  .891399,  .898082,
     &   .904778,  .911486,  .918206,  .924940,  .931686,  .938446,
     &   .945218,  .952003,  .958802,  .965614,  .972439,  .979278,
     &   .986130,  .992996,  .999875, 1.006769, 1.013676, 1.020597,
     &  1.027533, 1.034482, 1.041446, 1.048424, 1.055417, 1.062424,
     &  1.069446, 1.076482, 1.083534, 1.090600, 1.097681, 1.104778,
     &  1.111889, 1.119016, 1.126159, 1.133316, 1.140490, 1.147679,
     &  1.154884, 1.162105, 1.169342, 1.176595, 1.183864, 1.191149,
     &  1.198451, 1.205770, 1.213105, 1.220457, 1.227826, 1.235211,
     &  1.242614, 1.250034, 1.257471, 1.264926, 1.272398, 1.279888,
     &  1.287395, 1.294921, 1.302464, 1.310026, 1.317605, 1.325203,
     &  1.332819, 1.340454, 1.348108, 1.355780,
     &  1.363472, 1.371182, 1.378912, 1.386660, 1.394429, 1.402216,
     &  1.410024, 1.417851, 1.425698, 1.433565, 1.441453, 1.449360,
     &  1.457288, 1.465237, 1.473206, 1.481196, 1.489208, 1.497240,
     &  1.505293, 1.513368, 1.521465, 1.529583, 1.537723, 1.545885,
     &  1.554068, 1.562275, 1.570503, 1.578754, 1.587028, 1.595325,
     &  1.603644, 1.611987, 1.620353, 1.628743, 1.637156, 1.645593,
     &  1.654053, 1.662538, 1.671047, 1.679581, 1.688139, 1.696721,
     &  1.705329, 1.713961, 1.722619, 1.731303, 1.740011, 1.748746,
     &  1.757506, 1.766293, 1.775106, 1.783945, 1.792810, 1.801703,
     &  1.810623, 1.819569, 1.828543, 1.837545, 1.846574, 1.855631,
     &  1.864717, 1.873830, 1.882972, 1.892143, 1.901343, 1.910572,
     &  1.919830, 1.929117, 1.938434, 1.947781, 1.957158, 1.966566,
     &  1.976004, 1.985473, 1.994972, 2.004503, 2.014065, 2.023659,
     &  2.033285, 2.042943, 2.052633, 2.062355, 2.072110, 2.081899,
     &  2.091720, 2.101575, 2.111464, 2.121386, 2.131343, 2.141334,
     &  2.151360, 2.161421, 2.171517, 2.181648, 2.191815, 2.202018,
     &  2.212257, 2.222533, 2.232845, 2.243195,
     &  2.253582, 2.264006, 2.274468, 2.284968, 2.295507, 2.306084,
     &  2.316701, 2.327356, 2.338051, 2.348786, 2.359562, 2.370377,
     &  2.381234, 2.392131, 2.403070, 2.414051, 2.425073, 2.436138,
     &  2.447246, 2.458397, 2.469591, 2.480828, 2.492110, 2.503436,
     &  2.514807, 2.526222, 2.537684, 2.549190, 2.560743, 2.572343,
     &  2.583989, 2.595682, 2.607423, 2.619212, 2.631050, 2.642936,
     &  2.654871, 2.666855, 2.678890, 2.690975, 2.703110, 2.715297,
     &  2.727535, 2.739825, 2.752168, 2.764563, 2.777012, 2.789514,
     &  2.802070, 2.814681, 2.827347, 2.840069, 2.852846, 2.865680,
     &  2.878570, 2.891518, 2.904524, 2.917588, 2.930712, 2.943894,
     &  2.957136, 2.970439, 2.983802, 2.997227, 3.010714, 3.024263,
     &  3.037875, 3.051551, 3.065290, 3.079095, 3.092965, 3.106900,
     &  3.120902, 3.134971, 3.149107, 3.163312, 3.177585, 3.191928,
     &  3.206340, 3.220824, 3.235378, 3.250005, 3.264704, 3.279477,
     &  3.294323, 3.309244, 3.324240, 3.339312, 3.354461, 3.369687,
     &  3.384992, 3.400375, 3.415838, 3.431381, 3.447005, 3.462711,
     &  3.478500, 3.494372, 3.510328, 3.526370,
     &  3.542497, 3.558711, 3.575012, 3.591402, 3.607881, 3.624450,
     &  3.641111, 3.657863, 3.674708, 3.691646, 3.708680, 3.725809,
     &  3.743034, 3.760357, 3.777779, 3.795300, 3.812921, 3.830645,
     &  3.848470, 3.866400, 3.884434, 3.902574, 3.920821, 3.939176,
     &  3.957640, 3.976215, 3.994901, 4.013699, 4.032612, 4.051639,
     &  4.070783, 4.090045, 4.109425, 4.128925, 4.148547, 4.168292,
     &  4.188160, 4.208154, 4.228275, 4.248524, 4.268903, 4.289413,
     &  4.310056, 4.330832, 4.351745, 4.372794, 4.393982, 4.415310,
     &  4.436781, 4.458395, 4.480154, 4.502060, 4.524114, 4.546319,
     &  4.568676, 4.591187, 4.613854, 4.636678, 4.659662, 4.682807,
     &  4.706116, 4.729590, 4.753231, 4.777041, 4.801024, 4.825179,
     &  4.849511, 4.874020, 4.898710, 4.923582, 4.948639, 4.973883,
     &  4.999316, 5.024942, 5.050761, 5.076778, 5.102993, 5.129411,
     &  5.156034, 5.182864, 5.209903, 5.237156, 5.264625, 5.292312,
     &  5.320220, 5.348354, 5.376714, 5.405306, 5.434131, 5.463193,
     &  5.492496, 5.522042, 5.551836, 5.581880, 5.612178, 5.642734,
     &  5.673552, 5.704634, 5.735986, 5.767610,
     &  5.799512, 5.831694, 5.864161, 5.896918, 5.929968, 5.963316,
     &  5.996967, 6.030925, 6.065194, 6.099780, 6.134687, 6.169921,
     &  6.205486, 6.241387, 6.277630, 6.314220, 6.351163, 6.388465,
     &  6.426130, 6.464166, 6.502578, 6.541371, 6.580553, 6.620130,
     &  6.660109, 6.700495, 6.741297, 6.782520, 6.824173, 6.866262,
     &  6.908795, 6.951780, 6.995225, 7.039137, 7.083525, 7.128398,
     &  7.173764, 7.219632, 7.266011, 7.312910, 7.360339, 7.408308,
     &  7.456827, 7.505905, 7.555554, 7.605785, 7.656608, 7.708035,
     &  7.760077, 7.812747, 7.866057, 7.920019, 7.974647, 8.029953,
     &  8.085952, 8.142657, 8.200083, 8.258245, 8.317158, 8.376837,
     &  8.437300, 8.498562, 8.560641, 8.623554, 8.687319, 8.751955,
     &  8.817481, 8.883916, 8.951282, 9.019600, 9.088889, 9.159174,
     &  9.230477, 9.302822, 9.376233, 9.450735, 9.526355, 9.603118,
     &  9.681054, 9.760191, 9.840558, 9.922186,10.005107,10.089353,
     & 10.174959,10.261958,10.350389,10.440287,10.531693,10.624646,
     & 10.719188,10.815362,10.913214,11.012789,11.114137,11.217307,
     & 11.322352,11.429325,11.538283,11.649285,
     & 11.762390,11.877664,11.995170,12.114979,12.237161,12.361791,
     & 12.488946,12.618708,12.751161,12.886394,13.024498,13.165570,
     & 13.309711,13.457026,13.607625,13.761625,13.919145,14.080314,
     & 14.245263,14.414134,14.587072,14.764233,14.945778,15.131877,
     & 15.322712,15.518470,15.719353,15.925570,16.137345,16.354912,
     & 16.578520,16.808433,17.044929,17.288305,17.538873,17.796967,
     & 18.062943,18.337176,18.620068,18.912049,19.213574,19.525133,
     & 19.847249,20.180480,20.525429,20.882738,21.253102,21.637266,
     & 22.036036,22.450278,22.880933,23.329017,23.795634,24.281981,
     & 24.789364,25.319207,25.873062,26.452634,27.059789,27.696581,
     & 28.365274,29.068370,29.808638,30.589157,31.413354,32.285060,
     & 33.208568,34.188705,35.230920,36.341388,37.527131,38.796172,
     & 40.157721,41.622399,43.202525,44.912465,46.769077,48.792279,
     & 51.005773,53.437996,56.123356,59.103894 /)
      J = 0
30    CONTINUE
      IF (SIGMA.LE.0) THEN 
       WRITE(6,*) "Error in LANDAU: sigma cannot be less than zero!"
       GOTO 35
      ENDIF
      CALL RANDOM_NUMBER(X)
*
      U = 1000*X
      I = NINT(U)
      U = U-I
      IF ((I.GE.70.D0).AND.(I.LT.800.D0)) THEN
       RANLAN = F(I) + U*(F(I+1) - F(I))
      ELSEIF ((I.GE.7.D0).AND.(I .LE. 980.D0)) THEN
       RANLAN =  F(I) + U*(F(I+1)-F(I)-0.25*(1-U)*(F(I+2)-F(I+1)-F(I)
     &           +F(I-1)));
      ELSEIF (I.LT.7.D0) THEN
       V = LOG(X)
       U = 1/V
       RANLAN = ((0.99858950+(3.45213058E1+1.70854528E1*U)*U)/
     &          (1         +(3.41760202E1+4.01244582  *U)*U))*
     &          (-LOG(-0.91893853-V)-1);
      ELSE
       U = 1-X
       V = U*U
       IF (X.LE.0.999D0) THEN
        RANLAN = (1.00060006+2.63991156E2*U+4.37320068E3*V)/
     &           ((1         +2.57368075E2*U+3.41448018E3*V)*U)
       ELSE
        RANLAN = (1.00001538+6.07514119E3*U+7.34266409E5*V)/
     &           ((1         +6.06511919E3*U+6.94021044E5*V)*U);
       ENDIF
      ENDIF
      LANDAU = MEAN+SIGMA*RANLAN
      J = J+1
      !REPICK AT MOST 100 TIMES
      IF ((ABS(LANDAU).GT.ABS(DEMAX)).AND.(J.LE.100)) GOTO 30
35    CONTINUE
      RETURN 
      END
c  *********************************************************
      FUNCTION GAURAN(AVG,SIG)
*     SIMPLE GAUSSIAN GENERATOR
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IF (SIG.EQ.0) THEN
        GAURAN = AVG
        RETURN
      ENDIF
45    CONTINUE
      CALL RANDOM_NUMBER(R1)
      IF (R1.EQ.0) GOTO 45
      CALL RANDOM_NUMBER(R2)
      R2 = R2*6.283185
      GAURAN = AVG+SIG*SIN(R2)*SQRT(-2*LOG(R1))
      RETURN
      END
c  *********************************************************
      SUBROUTINE GAUVEC(IPV,IPN,IV,IN)
*     SIMPLE GAUSSIAN GENERATOR. OUTPUT IS ARRAY X.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER I,N
*-----MEMORY MANAGEMENT -----------------------------------
      PARAMETER(LMEM=1000000000,LVAR=100000000,LDIM=10000)
      INTEGER NTYP(LVAR),NBEG(LVAR),NEND(LVAR),NMAX(LVAR),
     *        NC(LMEM),NDIM(LDIM)
      DOUBLE PRECISION CC(LMEM)
      COMMON        NTYP,NBEG,NEND,NMAX, CC,NC, NDIM,IDIM, IVAR,IMEM
      COMMON /TYID/ NRE,NST,NLO,NCM,NVE,NIN,NIV,NDA,NCD,NTM,NGR
C
*     CONSISTENCY CHECKS AND PREPARATION
*     **********************************
      IF(NTYP(IN) .NE.NRE) CALL FOXNTY(IN)
      IF(NTYP(IPN).NE.NRE) CALL FOXNTY(IPN)
C
*     GET PARTICLE VARS
*     *****************
      N   = NINT(CC(NBEG(IN)))
      PN  = NINT(CC(NBEG(IPN)))
      DO 7 I=1,N
       DO 6 J=1,PN
        ! V(I,J)=GAURAN(PV(J),PV(J+1))
        AVG=CC(NBEG(IPV+2*J-1))
        SIG=CC(NBEG(IPV+2*J))
        CC(NBEG(IV+J)+I-1)=GAURAN(AVG,SIG)
6      CONTINUE
7     CONTINUE

*
      RETURN
      END
c  *********************************************************
      SUBROUTINE GAUS(IAV,ISI,IX,IN)
*     NOTE: DOES NOT WORK
*     SIMPLE GAUSSIAN GENERATOR. OUTPUT IS ARRAY X.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER I,N
*-----MEMORY MANAGEMENT -----------------------------------
      PARAMETER(LMEM=1000000000,LVAR=100000000,LDIM=10000)
      INTEGER NTYP(LVAR),NBEG(LVAR),NEND(LVAR),NMAX(LVAR),
     *        NC(LMEM),NDIM(LDIM)
      DOUBLE PRECISION CC(LMEM)
      COMMON        NTYP,NBEG,NEND,NMAX, CC,NC, NDIM,IDIM, IVAR,IMEM
      COMMON /TYID/ NRE,NST,NLO,NCM,NVE,NIN,NIV,NDA,NCD,NTM,NGR
C
*     CONSISTENCY CHECKS AND PREPARATION
*     **********************************
      IF(NTYP(IAV).NE.NRE) CALL FOXNTY(IAV)
      IF(NTYP(ISI).NE.NRE) CALL FOXNTY(ISI)
      IF(NTYP(IN) .NE.NRE) CALL FOXNTY(IN)
C
*     GET PARTICLE VARS
*     *****************
      AVG = CC(NBEG(IAV))
      SIG = CC(NBEG(ISI))
      N   = NINT(CC(NBEG(IN)))
*
      DO 47 I=1,N
       IF (SIG.EQ.0) THEN
        X=AVG
       ELSE
46      CONTINUE
        CALL RANDOM_NUMBER(R1)
        IF (R1.EQ.0) GOTO 46
        CALL RANDOM_NUMBER(R2)
        R2 = R2*6.283185
        X = AVG+SIG*SIN(R2)*SQRT(-2*LOG(R1))
       ENDIF
       CC(NBEG(IX+1)+I-1) = X
47    CONTINUE
      RETURN
      END
c  *********************************************************
      FUNCTION SCATDIST(TH0,P)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION MASS
      INTEGER I,J,N
      A = 0.5/(1-COS(TH0))
      MASS = 105.6583715
      E = SQRT(P**2+MASS**2)
      GAM = E/MASS
      BETA = SQRT(1-1/GAM**2)
      BG2 = (BETA*GAM)**2
      XI1 = 4.5d0                   !EMPERICAL CUTOFF BETWEEN DISTRIBUTIONS
      D = 2.d0                      !POWER IN DENOMINATOR (I.E. ~ 1/U^D)
      U0 = 1-XI1/A
      A1 = -A*BG2                   !SEE THESIS
      A2 = BG2*(1-D)-2*A
      A3 = BG2*(A-D-1)+2*(A-D)
      B  = U0+(A2+SQRT(A2**2-4*A1*A3))/(2*A1)
      ZETA = EXP(-A*(1-U0))*(1-U0+B)**D/(1+0.5*BG2*(1+U0-B))
      G0 = ZETA*((1+BG2)*(1/(1-U0+B)-1/(2+B))+BG2/2*LOG((1-U0+B)/(2+B)))
      GMAX = G0+(1-EXP(-A*(1-U0)))/A
      CALL RANDOM_NUMBER(G)
      G = G*GMAX
*      
      IF (G.GT.G0) THEN             !USE GAUSSIAN - GENERATION VIA INVERSION
       U = 1+LOG(A*(G-G0)+EXP(-A*(1-U0)))/A
      ELSE                          !USE MOTT - GENERATION VIA BISECTION METHOD
       ACC  = 1.D-8                 !+/- BINWIDTH OF g (ACCURACY)
       UMAX = U0
       UMIN = -1
80     CONTINUE       
       U = (UMAX+UMIN)/2
       TEST = GUC_TAIL(U,ZETA,B,BG2)     !'G UPPER-CASE' GENERATOR - CDF NOT PDF
       IF (TEST.GT.G*(1+ACC)) UMAX = U
       IF (TEST.LT.G*(1-ACC)) UMIN = U
       IF (NOT((TEST.GE.G*(1-ACC)).AND.(TEST.LE.G*(1+ACC)))) GOTO 80
      ENDIF
85    CONTINUE
*
      SCATDIST = P*U
      RETURN
      END
C  *********************************************************
      FUNCTION GLC_TAIL(U,ZETA,B,BG2)
C     RETURNS THE TAIL OF THE PDF OF THE SCATTERING FUNCTION
C     GIVEN THE SCALE, SHIFT, AND ENERGY.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      GLC_TAIL = ZETA*(1+0.5*BG2+(1+U-B))/((1-U+B)**2)
      RETURN
      END
C  *********************************************************
      FUNCTION GUC_TAIL(U,ZETA,B,BG2)
C     RETURNS THE TAIL OF THE CDF OF THE SCATTERING FUNCTION
C     GIVEN THE SCALE, SHIFT, AND ENERGY.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      GUC_TAIL = ZETA*((1+BG2)*(1/(1-U+B)-1/(2+B))+BG2/2*LOG
     &                 ((1-U+B)/(2+B)))
      RETURN
      END      
C  *********************************************************
C      REAL FUNCTION LATDIS(L,PX,PZ,TH0)
*     RETURNS THE LATERAL DISPLACEMENT CORRECTION ASSUMING
*     AN INITIAL ON-AXIS STRAIGHT TRAJECTORY (I.E. X = 0,
*     PZ = P).
C      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C      DOUBLE PRECISION L
C      THETA = ACOS(PZ/SQRT(PZ**2+PX**2))
C      SW = 6.D0          !SIGMA WIDTH; NOVEL; ADJUSTABLE
C      AW = 1+SQRT(3.)/2. !AVG   WIDTH; NOVEL; ADJUSTABLE
C      CC = SQRT(3.0)/2   !CORRELATION COEFFICIENT (FROM PDG)
C      AVG = SIGN(THETA*CC*L/AW,PX)
C      SIG = MAX(l*TH0*SQRT(1-CC**2)/SQRT(3.),ABS((l*PX/PZ)/SW))
C      LATDIS = GAURAN(AVG,SIG)
C      RETURN
C      END
C  *********************************************************
      REAL FUNCTION LATDIS(THETA,Z,THC)
*     RETURNS TRANSVERSE COORDINATE. BASED ON FERNOW AND
*     GALLARDO, "Muon transverse ionization cooling: 
*     Stochastic approach", PHYS. REV. E 52 1039 (1995).
*     THETA IS FLUCTUATION (I.E. THETA-THETA0), Z IS ABS
*     LENGTH, AND THC IS CRITICAL ANGLE COEFFICIENT.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION MU
      MU  = THETA*Z/2
      SIG = THETAC/(2*SQRT(3.))
      LATDIS = GAURAN(MU,SIG)
      RETURN
      END
C  *********************************************************
      FUNCTION DTOF(EI,P2,MASS,L)
*     RETURNS THE TEMPORAL DISPLACEMENT CORRECTION ASSUMING
*     AN INITIAL STRAIGHT TRAJECTORY (I.E. PZ = P).
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION L,MASS
      C  = 299792458.D0            ! m/s
      P1 = SQRT(EI**2-MASS**2)
      DTOF = (P2/SQRT(P2**2+MASS**2)-P1/SQRT(P1**2+MASS**2))
     &       *2*L/(C*(P2**2/(P2**2+MASS**2)-P1**2/(P1**2
     &       +MASS**2)))
      RETURN
      END
C  *********************************************************
      INTEGER FUNCTION DECAY(GAM1,GAM2,TOF)
*     RETURNS 4 IF PARTICLE DECAY OCCURED OR ZERO OTHERWISE.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      TAU  = 2.197034D-6          !MEAN LIFETIME IN [s]
      GAM  = (GAM1+GAM2)/2        !AVG GAMMA; PROBLEM FOR LARGE STEPS
      T    = TOF/GAM
      CALL RANDOM_NUMBER(R1)
      TEST = EXP(-T/TAU)
      DECAY = 0
      IF (R1.GT.TEST) DECAY = 4
      RETURN
      END
C   ********************************************************
      FUNCTION GET_DCP(ETA,MP)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION KDE, MP(6)
C     ADOPT DENSITY EFFECT PARAMETER FROM PDG:
C     http://pdg.web.cern.ch/pdg/2013/AtomicNuclearProperties/adndt.pdf
C     I HAVE YET TO IMPLEMENT THE 'CONDUCTORS' PORTION
      HWP = 28.816*SQRT(MP(3)/(1.E6)*MP(1)/MP(2))*1.E-6 !PLAMSA ENERGY
      X   = LOG10(ETA)
      C   = 2*LOG(MP(4)/HWP)+1
      X0  = 0.2D0
      KDE = 3.D0      !K FOR THE DENSITY EFFECT
C     DETERMINE X1, X0 FOR SOLIDS, LIQUIDS:
      IF (MP(4).GE.0.0001D0) THEN
       X1 = 3.D0
       IF (C.GE.5.215D0) X0 = 0.326*C-1.5
      ELSE
       X1 = 2.D0
       IF (C.GE.3.681D0) X0 = 0.326*C-1.0
      ENDIF
C     DETERMINE X1, X0 FOR GASSES:
C     YET TO IMPLEMENT STATE DISTINCTION FOR COSY!
C     ********************************************
C      X1 = 4.D0 !DEFAULT
C      IF (C.GE.13.804D0) THEN
C       X0 = 0.326*C-1.5
C       X1 = 5.D0
C      ELSEIF (C.GE.12.25) THEN
C       X0 = 2.D0
C       X1 = 5.D0
C      ELSEIF (C.GE.11.50) THEN
C       X0 = 2.D0
C      ELSEIF (C.GE.11.00) THEN
C       X0 = 1.9D0
C      ELSEIF (C.GE.10.50)
C       X0 = 1.8D0
C      ELSEIF (C.GE.10.00)
C       X0 = 1.7D0
C      ELSE       
C       X0 = 1.6D0
C      ENDIF
C       ADE = (C-2*LOG(10.)*X0)/((X1-X0)**3)
*
C     "TABULATED DATA" FOR HYDROGEN IS AT BUBBLE-CHAMBER CONDITIONS.
C     THEREFORE A CORRECTION MUST BE MADE:
      R = 1
      IF (MP(1)/MP(2).EQ.1.D0/1.008D0) R = MP(3)/(0.060*1.D6)
      C = C-LOG(R)
      X0 = X0-0.5*LOG10(R)
      X1 = X1-0.5*LOG10(R)
*
      IF (X.GE.X1) THEN
       DCP = 2*LOG(10.)*X-C
      ELSEIF (X.GT.X0) THEN
       DCP = 2*LOG(10.)*X-C+ADE*(X1-X)**KDE
      ELSE
       DCP = 0.D0
      ENDIF
      GET_DCP = DCP
      RETURN
      END
C   ********************************************************
      FUNCTION GET_SCP(ETA, MP)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION BAR(6), MP(6)
C     ADOPT SHELL CORRECTION APPROX BY BARKAS.
C     THIS APPROXMATION IS OUT OF DATE, AND IS THEREFORE QUITE ROUGH.
C     SEE PDG FOR MORE INFO: 
C     http://pdg.web.cern.ch/pdg/2013/AtomicNuclearProperties/adndt.pdf
      IF (ETA>0.13D0) THEN !ONLY GOOD FOR ETA>0.13 (KE = 0.89 FOR MUON)
       BAR = (/ 0.422377, 0.0304043, -0.00038106, 3.858019, -0.1667989, 
     &          0.00157955 /)
       SCP = (BAR(1)/ETA**2+BAR(2)/ETA**4+BAR(3)/ETA**6)*MP(4)**2*1.E6
     &      +(BAR(4)/ETA**2+BAR(5)/ETA**4+BAR(6)/ETA**6)*MP(4)**3*1.E9
      ENDIF
       GET_SCP = SCP
      RETURN
      END
C   ********************************************************
      REAL FUNCTION MASSBYID(ID)
      INTEGER ID
C     RETURNS PARTICLE MASS IN MeV BASED ON PDG ID.
C     CURRENTLY ONLY SUPPORTS MUONS (13).
      IF (ABS(ID).EQ.11) MASSBYID=0.5109989461
      IF (ABS(ID).EQ.13) MASSBYID=105.6583715
      RETURN
      END     
C   ********************************************************
      REAL FUNCTION MASSBYIDICOOL(ID)
      INTEGER ID
C     RETURNS PARTICLE MASS IN MeV BASED ON PDG ID.
C     CURRENTLY ONLY SUPPORTS MUONS (2).
      IF (ABS(ID).EQ.1) MASSBYIDICOOL=0.5109989461
      IF (ABS(ID).EQ.2) MASSBYIDICOOL=105.6583715
      RETURN
      END
C   ********************************************************
      SUBROUTINE RG4BL(IFILE, INPART, IV)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER I
      DOUBLE PRECISION MASSBYID
C     READS PARTICLES FROM A G4BL-FORMATTED FILE. INPUTS ARE:
C	IFILE	- THE NUMBER OF THE FILE (E.G. 12 IN 'FORT.12')
C	INPART	- THE NUMBER OF PARTICLES TO READ
C	IV	- THE OUTPUT VECTOR
C
C	OUTPUT VECTOR IS OF THE FORM 
C	V = (X,PX,Y,PY,T,E) IN m, MeV, AND s
*-----MEMORY MANAGEMENT -----------------------------------
      PARAMETER(LMEM=1000000000,LVAR=100000000,LDIM=10000)
      INTEGER NTYP(LVAR),NBEG(LVAR),NEND(LVAR),NMAX(LVAR),
     *        NC(LMEM),NDIM(LDIM)
      DOUBLE PRECISION CC(LMEM)
      COMMON        NTYP,NBEG,NEND,NMAX, CC,NC, NDIM,IDIM, IVAR,IMEM
      COMMON /TYID/ NRE,NST,NLO,NCM,NVE,NIN,NIV,NDA,NCD,NTM,NGR

*     CONSISTENCY CHECKS AND PREPARATION
*     **********************************
      IF(NTYP(IFILE).NE.NRE) CALL FOXNTY(IFILE)
      IF(NTYP(INPART).NE.NRE) CALL FOXNTY(INPART)
C
*     GET VARS
*     ********
      FNAME = NINT(CC(NBEG(IFILE)))
      NPART = NINT(CC(NBEG(INPART)))
C
*     GET RID OF FIRST THREE LINES
*     ****************************
      READ(FNAME,*)
      READ(FNAME,*)
      READ(FNAME,*)
C
*     READ THE REST OF THE FILE
*     *************************
      DO 5 I=1,NPART
       READ(FNAME,*,END=10) X,Y,Z,PX,PY,PZ,T,PDGID,EID,TID,PID,W
       E=SQRT(PX**2+PY**2+PZ**2+MASSBYID(NINT(PDGID))**2)
       CC(NBEG(IV+1)+I-1)=X/1000
       CC(NBEG(IV+2)+I-1)=PX
       CC(NBEG(IV+3)+I-1)=Y/1000
       CC(NBEG(IV+4)+I-1)=PY
       CC(NBEG(IV+5)+I-1)=T
       CC(NBEG(IV+6)+I-1)=E
5     CONTINUE
10    CONTINUE
      END
C   ********************************************************
      SUBROUTINE RICOOL(IFILE, INPART, IV)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER I
      DOUBLE PRECISION MASSBYID
C     READS PARTICLES FROM AN ICOOL-FORMATTED FILE. INPUTS ARE:
C       IFILE   - THE NUMBER OF THE FILE (E.G. 12 IN 'FORT.12')
C       INPART  - THE NUMBER OF PARTICLES TO READ
C       IV      - THE OUTPUT VECTOR
C
C       OUTPUT VECTOR IS OF THE FORM 
C       V = (X,PX,Y,PY,T,E) IN m, MeV, AND s
*-----MEMORY MANAGEMENT -----------------------------------
      PARAMETER(LMEM=1000000000,LVAR=100000000,LDIM=10000)
      INTEGER NTYP(LVAR),NBEG(LVAR),NEND(LVAR),NMAX(LVAR),
     *        NC(LMEM),NDIM(LDIM)
      DOUBLE PRECISION CC(LMEM)
      COMMON        NTYP,NBEG,NEND,NMAX, CC,NC, NDIM,IDIM, IVAR,IMEM
      COMMON /TYID/ NRE,NST,NLO,NCM,NVE,NIN,NIV,NDA,NCD,NTM,NGR

*     CONSISTENCY CHECKS AND PREPARATION
*     **********************************
      IF(NTYP(IFILE).NE.NRE) CALL FOXNTY(IFILE)
      IF(NTYP(INPART).NE.NRE) CALL FOXNTY(INPART)
C
*     GET VARS
*     ********
      FNAME = NINT(CC(NBEG(IFILE)))
      NPART = NINT(CC(NBEG(INPART)))
C
*     READ THE FILE
*     *************
      DO 5 I=1,NPART
       READ(FNAME,*,END=10) PID,PNUM,PDGID,FLAG,T,W,X,Y,Z,PX,PY,PZ,
     & SPINX,SPINY,SPINZ
       E=SQRT(PX**2+PY**2+PZ**2+(MASSBYIDICOOL(NINT(PDGID))/1000)**2)*1000
       CC(NBEG(IV+1)+I-1)=X
       CC(NBEG(IV+2)+I-1)=PX*1000
       CC(NBEG(IV+3)+I-1)=Y
       CC(NBEG(IV+4)+I-1)=PY*1000
       CC(NBEG(IV+5)+I-1)=T
       CC(NBEG(IV+6)+I-1)=E
5     CONTINUE
10    CONTINUE
      END

C   ********************************************************
      SUBROUTINE WICOOL(IZ, IREG, INPART, IV, IUI, IAPE)
C     WRITES PARTICLES TO UI IN ICOOL-STYLE. INPUTS ARE:
C	IZ 	- Z LOCATION
C	IREG 	- REGION NUMBER
C	INPART	- NUMBER OF PARTICLES
C	IV	- VECTOR TO WRITE
C	IUI	- UI TO WRITE TO
C	IAPE	- APERATURE
C
C     VECTOR IV MUST BE OF THE FORM
C     V = (X,PX,Y,PY,T,E) IN m, MeV, AND s
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION MASS
      DOUBLE PRECISION, DIMENSION(:,:), ALLOCATABLE :: V ! V(NPART,6)
      INTEGER IALLOCATESTATUS,I,J
*-----MEMORY MANAGEMENT -----------------------------------
      PARAMETER(LMEM=1000000000,LVAR=100000000,LDIM=10000)
      INTEGER NTYP(LVAR),NBEG(LVAR),NEND(LVAR),NMAX(LVAR),
     *        NC(LMEM),NDIM(LDIM)
      DOUBLE PRECISION CC(LMEM)
      COMMON        NTYP,NBEG,NEND,NMAX, CC,NC, NDIM,IDIM, IVAR,IMEM
      COMMON /TYID/ NRE,NST,NLO,NCM,NVE,NIN,NIV,NDA,NCD,NTM,NGR

*     CONSISTENCY CHECKS AND PREPARATION
*     **********************************
      IF(NTYP(IZ).NE.NRE) CALL FOXNTY(IAV)
      IF(NTYP(IREG).NE.NRE) CALL FOXNTY(ISI)
      IF(NTYP(INPART).NE.NRE) CALL FOXNTY(IN)
      IF(NTYP(IUI).NE.NRE) CALL FOXNTY(IUI)
      IF(NTYP(IAPE).NE.NRE) CALL FOXNTY(IAPE)
C
*     GET VARS
*     ********
      Z = CC(NBEG(IZ))
      REG = NINT(CC(NBEG(ISI)))
      NPART = NINT(CC(NBEG(INPART)))
      UI = NINT(CC(NBEG(IUI)))
      APE = CC(NBEG(IAPE))
      MASS = 105.6583715
      ALLOCATE(V(NPART+10,7),Stat=IALLOCATESTATUS)
      IF (IALLOCATESTATUS /= 0) STOP "*** Not enough memory ***"
*
      DO 7 I=1,NPART
        X =CC(NBEG(IV+1)+I-1)
        PX=CC(NBEG(IV+2)+I-1)
        Y =CC(NBEG(IV+3)+I-1)
        PY=CC(NBEG(IV+4)+I-1)
        T =CC(NBEG(IV+5)+I-1)
        E =CC(NBEG(IV+6)+I-1)
        P =SQRT(E**2-MASS**2)
        PZ=SQRT(P**2-PX**2-PY**2)
C       MAKE SURE PARTICLE ISN'T LOST
        TOL=1E10
        IF (APE.LE.0) APE=TOL
        IF ((X.GE.TOL).OR.(Y.GE.TOL).OR.(T.GE.TOL).OR.(PZ.GE.TOL).OR.
     &     (SQRT(X**2+Y**2).GE.APE)) THEN
          T =0
          X =0
          Y =0
          Z =-1
          PX=0
          PY=0
          PZ=-1
        ENDIF
       WRITE(UI,20) I,1,2,0,1,T,X,Y,Z,PX,PY,PZ,0,0,0,1,0,0,0,0,0,0,0
7     CONTINUE
20    FORMAT(I,4I2,7E22.14,11I2)
      END

